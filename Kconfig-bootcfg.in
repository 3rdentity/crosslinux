# vim: syntax=kconfig

# *****************************************************************************
# Select the board; there needs to be an corresponding directory in boards/ for
# each option here.  A number of settings are based upon the boards selection.
# *****************************************************************************

choice
	bool
	default BOARD_PC_486
	prompt "Target Board"
	---help---
	  Select the target board.

config BOARD_BEAGLEBONE
	bool "Beagle Bone \"White\""
	---help---
	  The BeagleBone "White" is a low-cost, high-expansion BeagleBoard with
	  an AM335x 720MHz ARM Cortex-A8 SoC.
	  http://beagleboard.org/bone/
	  http://www.ti.com/product/am3358
	  http://en.wikipedia.org/wiki/ARM_architecture

config BOARD_MAC_G4
	bool "Macintosh G4"
	---help---
	  Macintosh G3 or G4 (PowerPC 7xx/74xx) such as an Apple PowerMac or
	  PowerBook computer.
	  http://en.wikipedia.org/wiki/PowerPC_G3
	  http://en.wikipedia.org/wiki/PowerPC_G4

config BOARD_PC_486
	bool "PC i486"
	---help---
	  Generic PC compatible computer with an Intel i486 microprocessor,
	  specifically the i486 instruction set, or a more capable compatible
	  CPU.
	  http://en.wikipedia.org/wiki/I486

config BOARD_PC_686
	bool "PC i686"
	---help---
	  Generic PC compatible computer with an Intel Pentium Pro
	  microprocessor, or a more capable compatible CPU.
	  http://en.wikipedia.org/wiki/I686

config BOARD_PC_X86_64
	bool "PC x86_64"
	---help---
	  Generic PC compatible computer with an AMD64/Intel 64 microprocessor.
	  http://en.wikipedia.org/wiki/X86_64

endchoice

config BOARD
	string
	default "beagle_bone" if BOARD_BEAGLEBONE
	default "mac_g4"      if BOARD_MAC_G4
	default "pc_i486"     if BOARD_PC_486
	default "pc_i686"     if BOARD_PC_686
	default "pc_x86_64"   if BOARD_PC_X86_64

config CPU_ARCH
	string
	default "armv7"   if BOARD_BEAGLEBONE
	default "powerpc" if BOARD_MAC_G4
	default "i486"    if BOARD_PC_486
	default "i686"    if BOARD_PC_686
	default "x86_64"  if BOARD_PC_X86_64

config LINUX_ARCH
	string
	default "arm"     if BOARD_BEAGLEBONE
	default "powerpc" if BOARD_MAC_G4
	default "i386"    if BOARD_PC_486
	default "i386"    if BOARD_PC_686
	default "x86_64"  if BOARD_PC_X86_64

config CFLAGS
	string
	default "-mcpu=cortex-a8"                if BOARD_BEAGLEBONE
	default "-mcpu=powerpc -mtune=powerpc"   if BOARD_MAC_G4
	default "-march=i486 -mtune=i486 -Os"    if BOARD_PC_486
	default "-march=i686 -mtune=generic -Os" if BOARD_PC_686
	default "-m64 -Os"                       if BOARD_PC_X86_64

config BOOTLOADER
	string
	default "u-boot"   if BOARD_BEAGLEBONE
	default "yaboot"   if BOARD_MAC_G4
	default "isolinux" if BOARD_PC_486
	default "isolinux" if BOARD_PC_686
	default "isolinux" if BOARD_PC_X86_64

# *****************************************************************************
# The default kind of boot is to have the root file system in an ephemeral RAM
# disk; this option can select to boot and mount the root file system from an
# initramfs (CPIO archive) or a persistent fixed drive.
# *****************************************************************************

choice
	bool
	default ROOTFS_INITRD
	prompt "Root File System"
	---help---
	  Select the type of root file system to build.

config ROOTFS_INITRD
	bool
	prompt "RAM Disk"
	---help---
	  Select this to make an image of the root file system.  You will be
	  asked for a file system type and size.

	  You also will be given the opportunity to select to make a bootable
	  CD-ROM ISO9660 image.  In this case, your target system will be
	  configured to boot with the root file system in a RAM Disk.

config ROOTFS_INITRAMFS
	bool
	prompt "initramfs (CPIO Archive)"
	---help---
	  Select this to make an initramfs CPIO archive of the root file
	  system.

	  You also will be given the opportunity to select to make a bootable
	  CD-ROM ISO9660 image.  In this case, your target system will be
	  configured to boot with an initramfs (CPIO archive) root file system.

config ROOTFS_TARBALL
	bool
	prompt "Compressed tar file"
	---help---
	  Select this to simply tar-up the root file system.

	  This is an appropriate selection to configure your target system to
	  boot with the root file system in a persistent storage device, such
	  as a USB or SDCard.

	  Random Related Information:

		  Some systems only boot from a persistent storage device, such
		  as the BeagleBone.

endchoice

config BOOT_EPHEMERAL
	bool
	default y if ROOTFS_INITRD
	default y if ROOTFS_INITRAMFS
	default n if ROOTFS_TARBALL

config BOOT_PERSISTENT
	bool
	default n if ROOTFS_INITRD
	default n if ROOTFS_INITRAMFS
	default y if ROOTFS_TARBALL

# *****************************************************************************
# Choices for the RAM disk root file system and its size.
# *****************************************************************************

if ROOTFS_INITRD

choice
	bool
	default ROOTFS_EXT2
	prompt "Root File System Type"
	---help---
	  Select the root file system type.  The root file system will be
	  created as an image file and formatted according to the type selected
	  here.  If you selected to 'Boot to Persistent Storage Device', then
	  the root file system on that device will be formated according to the
	  file system type selected here.

config ROOTFS_EXT2
	bool "ext2"
	---help---
	  Format an ext2 root file system.

config ROOTFS_EXT3
	bool "ext3"
	---help---
	  Format an ext3 root file system.

config ROOTFS_EXT4
	bool "ext4"
	---help---
	  Format an ext4 root file system.

endchoice

config ROOTFS_SIZE_MB
	int
	default 9
	prompt "Root File System Size, in MB"
	---help---
	  This is the size of the root file system.

	  If your root file system size is less than 16 MB, then set the
	  'Root File System Type' to ext2; other file system types may not be
	  able to format such a small file system, at least not without
	  forgoing file system journalling.

endif # if ROOTFS_INITRD

# *****************************************************************************
# These are the options for the ephemeral root file system.
# *****************************************************************************

config MEDIA_ISO9660
	bool
	default y
	prompt "Make bootable ISO9660 image"
	depends on BOOT_EPHEMERAL && ! BOARD_BEAGLEBONE
	---help---
	  The crosslinux build process will create a bootable ISO9660 image
	  containing the target Linux system to be built.

	  In this case, you likely want the target system to boot from a CD-ROM.

# *****************************************************************************
# These are the options for choosing to include extra items.
# *****************************************************************************

if ! BOOT_EPHEMERAL || MEDIA_ISO9660

config INCLUDE_MEDIA_ROOT_DOCS
	bool
	default y
	prompt "Copy files from ./site/root-doc to boot media."
	---help---
	  Copy files from ./site/root-doc to the top-level ISO9660 directory,
	  or to the root file system in '/usr/share/${BRAND_NAME}/doc',
	  depending upon the MEDIA_ISO9660 selection above.

	  This might be good for a license file, "read me" file, authors list
	  file, etc.

config INCLUDE_MEDIA_DEBUG_KERNEL
	bool
	default y
	prompt "Include debug kernel in boot media."
	---help---
	  Include debug kernel in boot directory; it will be in the boot
	  directory with the stripped compressed kernel, and the System.map
	  file also will be included in that directory.

	  If you've selected MEDIA_ISO9660, then the directory structure of the
	  ISO9660 file system may look something like:

		boot/initrd
	  	     vmlinuz
	  	     vmlinux <------ added by selecting this option
	  	     System.map <--- added by selecting this option

config INCLUDE_MEDIA_CONFIG_FILES
	bool
	default y
	prompt "Include kernel and busybox config files in boot media."
	---help---
	  Include kernel config file.  This will copy the kernel configuration
	  file to the ISO9660 file system, or to the root file system in
	  '/usr/share/${BRAND_NAME}/config', depending upon the MEDIA_ISO9660
	  selection above.

	  If you've selected MEDIA_ISO9660, then the directory structure of the
	  ISO9660 file system may look something like:

		boot/initrd
		     vmlinuz
		config/kernel.cfg <---- added by selecting this option

config INCLUDE_MEDIA_DOCS
	bool
	default y
	prompt "Copy files from ./site/doc to boot media."
	---help---
	  Include arbitrary 'documentation' files.  This will copy the files
	  from ./site/doc to a 'doc' directory in the ISO9660 file system, or
	  to the root file system in '/usr/share/${BRAND_NAME}/doc', depending
	  upon the MEDIA_ISO9660 selection above.

config INCLUDE_BUILD_LOGS
	bool
	default y
	prompt "Include build logs on boot media."
	---help---
	  Include the build log files.  This will copy the build log files to
	  the ISO9660 file system, or to the root file system in
	  '/usr/share/${BRAND_NAME}/log', depending upon the MEDIA_ISO9660
	  selection above.

	  If you've selected MEDIA_ISO9660, then the directory structure of the
	  ISO9660 file system may look something like:

		boot/initrd
		     vmlinuz
		logs/bash-<version>.log <------ added by selecting this option
		     busybox-<version>.log <--- added by selecting this option

config INCLUDE_BIN_PKGS
	bool
	default y
	prompt "Include binary packages on boot media."
	---help---
	  Include the binary package files.  This will copy the binary package
	  files to the ISO9660 file system, or to the root file system in
	  '/usr/share/${BRAND_NAME}/pkgbin', depending upon the MEDIA_ISO9660
	  selection above.

	  If you've selected MEDIA_ISO9660, then the directory structure of the
	  ISO9660 file system may look something like:

		boot/initrd
		     vmlinuz
		pkgbin/bash-<version>.tbz <--- added by selecting this option

endif # if ! BOOT_EPHEMERAL || MEDIA_ISO9660
