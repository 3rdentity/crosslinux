#!@@CL_BASH@@


# This file is part of the crosslinux software.
# The license which this software falls under is GPLv2 as follows:
#
# Copyright (C) 2013-2013 Douglas Jerome <djerome@crosslinux.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA


# *****************************************************************************
#
# PROGRAM DESCRIPTION
#
#      This script makes the crosslinux target bootable file system staging
#      dirctory.
#
# CHANGE LOG
#
#      2013-07-03  drj  Adapted to crosslinux from the ttylinux build system.
#
# *****************************************************************************


# *************************************************************************** #
#                                                                             #
# F I L T E R E D   C O N S T A N T S                                         #
#                                                                             #
# *************************************************************************** #

cl_libdir="@@CL_LIBDIR@@"


# *************************************************************************** #
#                                                                             #
# F U N C T I O N S                                                           #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Make and initialize a staging directory.
# *****************************************************************************

staging_root() {

local lcldir=$1
local mname=""

if [[ "${lcldir}" == "cdrom" ]]; then
	mname=CDROM
fi
if [[ "${lcldir}" == "sdcard" ]]; then
	mname=FLASH
fi

echo -n "i> Recreating boot staging directory ................. "
rm --force --recursive "${lcldir}/"
mkdir --mode=755 --parents "${lcldir}/"
mkdir --mode=755 --parents "${lcldir}/boot/"
mkdir --mode=755 --parents "${lcldir}/config/"
mkdir --mode=755 --parents "${lcldir}/doc/"
mkdir --mode=755 --parents "${lcldir}/log/"
mkdir --mode=755 --parents "${lcldir}/pkgbin/"
if [[ "${lcldir}" == "cdrom" ]]; then
	mkdir --mode=755 --parents "${lcldir}/boot/isolinux/"
fi
echo "DONE"

echo -n "i> Gathering top-level document files ................ "
>${lcldir}/LABEL
echo "SOURCE_TIMESTAMP=\"$(date)\""              >>${lcldir}/LABEL
echo "SOURCE_MEDIA=\"${mname}\""                 >>${lcldir}/LABEL
echo "SOURCE_BRAND=\"${CONFIG_BRAND_NAME}\""     >>${lcldir}/LABEL
echo "SOURCE_NAME=\"${CONFIG_RELEASE_NAME}\""    >>${lcldir}/LABEL
echo "SOURCE_VERSION=\"${CONFIG_RELEASE_VERS}\"" >>${lcldir}/LABEL
echo "SOURCE_ARCH=\"${CONFIG_CPU_ARCH}\""        >>${lcldir}/LABEL
chmod 644 ${lcldir}/LABEL
if [[ x"${CONFIG_INCLUDE_MEDIA_ROOT_DOCS:-}" == x"y" ]]; then
	for _f in ${TARGET_SITE_DIR}/doc-root/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" "${lcldir}/"
			chmod 644 "${lcldir}/${_f##*/}"
		fi
	done
fi
echo "DONE"

}


# *****************************************************************************
# Add any optional extra items to the staging directory.
# *****************************************************************************

staging_extra_files() {

local lcldir=$1

if [[ x"${CONFIG_INCLUDE_MEDIA_CONFIG_FILES:-}" == x"y" ]]; then
	echo -n "i> Getting the kernel configuration file ............. "
	cp "${TARGET_K_ROOT_DIR}/config/"*.cfg ${lcldir}/config/
	chmod 644 ${lcldir}/config/*
	echo "DONE"
fi

if [[ x"${CONFIG_INCLUDE_MEDIA_DOCS:-}" == x"y" ]]; then
	echo -n "i> Getting the site documents ........................ "
	_needChmod=""
	for _f in ${TARGET_SITE_DIR}/doc/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" ${lcldir}/doc/
			_needChmod="y"
		fi
	done
	if [[ -n "${_needChmod}" ]]; then chmod 644 ${lcldir}/doc/*; fi
	unset _needChmod
	echo "DONE"
fi

if [[ x"${CONFIG_INCLUDE_BUILD_LOGS:-}" == x"y" ]]; then
	echo -n "i> Getting the build logs ............................ "
	_needChmod=""
	for _f in ${TARGET_LOG_DIR}/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" ${lcldir}/log/
			_needChmod="y"
		fi
	done
	if [[ -n "${_needChmod}" ]]; then
		bzip2 --compress ${lcldir}/log/*
		chmod 644 ${lcldir}/log/*
	fi
	unset _needChmod
	echo "DONE"
fi

if [[ x"${CONFIG_INCLUDE_BIN_PKGS:-}" == x"y" ]]; then
	echo -n "i> Copying packages to Boot CD ....................... "
	_needChmod=""
	for _f in ${TARGET_PKGBIN_DIR}/*; do
		if [[ -f "${_f}" ]]; then
			cp "${_f}" ${lcldir}/pkgbin/
			_needChmod="y"
		fi
	done
	if [[ -n "${_needChmod}" ]]; then chmod 644 ${lcldir}/pkgbin/*; fi
	unset _needChmod
	echo "DONE"
fi

}


# *************************************************************************** #
#                                                                             #
# M A I N   P R O G R A M                                                     #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Set up the shell functions and environment variables.
# *****************************************************************************

source ./crosslinux-config.sh # target build configuration
source ${cl_libdir}/scripts/_constants.sh # build support
source ${cl_libdir}/scripts/_functions.sh # build support
CL_infoSigExit=1 # Print info on unexpected exit.

CL_config_setup || {
	CL_infoSigExit=0 # No info needed, because exit now is expected.
	exit 1
}


# *****************************************************************************
# Main Program
# *****************************************************************************

echo ""
echo "##### START making bootable file system directory"

pushd "${TARGET_PROJ_DIR}/target/" >/dev/null 2>&1

# Even with 'set +e' the trap handler will run if a command or shell function
# returns non-zero, and in that case the trap handler also will run when the
# subshell completes.  Set 'CL_exitOnSigErr' to zero to not let the trap
# handler exit the shell when the subsell returns an error so the return value
# can be checked and a message printed before exiting the shell; also don't
# print the backtrace info because it did that in the subshell.
#
set +e ; # Let a build step fail without exiting this script.
CL_infoOnSigErr=0
CL_exitOnSigErr=0
(
# The subshell's 'CL_infoOnSigErr' needs to be set so the trap handler will
# print a backtrace for the subshell, if a command or shell function returns
# non-zero.
CL_infoOnSigErr=1
if [[ x"${CONFIG_MEDIA_ISO9660:-}" == x"y" ]]; then
	# This will make a new directory structure:
	# ${TARGET_PROJ_DIR}/target/cdrom/
	staging_root "cdrom"
	source "${CROSSLINUX_BOARDC_DIR}/bld-iso9660-dir.sh"
	staging_extra_files "cdrom"
fi
if [[ x"${CONFIG_ROOTFS_TARBALL:-}" == x"y" ]]; then
	# Remake the root file system tarbal with any optional extra items.
	staging_root "sdcard"
	source "${CROSSLINUX_BOARDC_DIR}/bld-tardir.sh"
	staging_extra_files "sdcard"
fi
)
set -e ; # All done with build steps; enable exit on a non-zero status.
CL_infoOnSigErr=1
CL_exitOnSigErr=1

popd >/dev/null 2>&1

echo "##### DONE making bootable file system directory"
echo ""


# *****************************************************************************
# Exit with Status
# *****************************************************************************

CL_infoSigExit=0 # No info needed, because exit now is expected.
exit 0


# end of file
