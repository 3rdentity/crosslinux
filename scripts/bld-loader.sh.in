#!@@CL_BASH@@


# This file is part of the crosslinux software.
# The license which this software falls under is GPLv2 as follows:
#
# Copyright (C) 2013-2013 Douglas Jerome <djerome@crosslinux.org>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307  USA


# *****************************************************************************
#
# PROGRAM DESCRIPTION
#
#      This script builds the crosslinux loader.
#
# CHANGE LOG
#
#      2013-06-22  drj  Adapted to crosslinux from the ttylinux build system.
#
# *****************************************************************************


# *************************************************************************** #
#                                                                             #
# F I L T E R E D   C O N S T A N T S                                         #
#                                                                             #
# *************************************************************************** #

cl_libdir="@@CL_LIBDIR@@"


# *************************************************************************** #
#                                                                             #
# F U N C T I O N S                                                           #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Cleanup any built and in-progress loader build.
# *****************************************************************************

loader_clean() {

echo "=> Removing the loader:"
rm --verbose --force --recursive "${TARGET_LOADER_DIR}/"*

}


# *****************************************************************************
# Build a loader package from source.
# *****************************************************************************

# Function Arguments:
#      $1 ... Package name, like "glibc-2.19".

loader_xbuild() {

unset pkg_patch
unset pkg_configure
unset pkg_make
unset pkg_install
unset pkg_clean
source "${CROSSLINUX_LOADER_DIR}/bld.sh"

# Get the source package.  This function will unzip and untar the source
# package.
#
echo -n "i> Getting loader source package ... "
CL_package_get ${PKG_ZIP}
echo    "DONE"

# Patch, configure, and build.
#
PKG_STATUS=""
[[ -z "${PKG_STATUS}" ]] && pkg_patch     $1
[[ -z "${PKG_STATUS}" ]] && pkg_configure $1
[[ -z "${PKG_STATUS}" ]] && pkg_make      $1
[[ -z "${PKG_STATUS}" ]] && pkg_install   $1
[[ -z "${PKG_STATUS}" ]] && pkg_clean     $1
if [[ -n "${PKG_STATUS}" ]]; then
	echo -e "${TEXT_BRED}ERROR${TEXT_NORM}" >&${CONSOLE_FD}
	echo    "E> ${PKG_STATUS}"              >&${CONSOLE_FD}
	exit 1 # Bust out of sub-shell.
fi
unset PKG_STATUS

# Remove the un-tarred loader source package directory.
#
[[ -d "${PKG_DIR}" ]] && rm --force --recursive "${PKG_DIR}" || true

}


# *************************************************************************** #
#                                                                             #
# M A I N   P R O G R A M                                                     #
#                                                                             #
# *************************************************************************** #


# *****************************************************************************
# Set up the shell functions and environment variables.
# *****************************************************************************

declare K_LOADER=""

K_LDRLIST="crosslinux-loader.txt"

source ./crosslinux-config.sh # target build configuration
source ${cl_libdir}/scripts/_constants.sh # build support
source ${cl_libdir}/scripts/_functions.sh # build support

CL_config_setup || exit 1


# *****************************************************************************
# Main Program
# *****************************************************************************

# Check for a script argument:
#
# $1 == "clean" ...... This means to clean any loader build artifacts and any
#                      in-progress loader build artifacts, maybe leftover from
#                      loader build problem.

if [[ $# -gt 0 && -n "$1" ]]; then
	# "$1" may be unbound so hide it in this if statement.
	# Clean if so asked.
	if [[ "$1" == "clean" ]]; then
		loader_clean
		exit 0
	fi
fi

_c=0  # Package count.

# Need to get the loader package from the ${K_LDRLIST} file.
while read pname pad; do
	[[ -z "${pname}"         ]] && continue || true
	[[ "${pname:0:1}" == "#" ]] && continue || true
	K_LOADER=${pname}
	_c=$((${_c} + 1))
done <${K_LDRLIST}

unset _c

if [[ -z "${K_LOADER}" ]]; then
	echo "E> No loader package to build.  How did you do that?"
	exit 1
fi

# -----------------------------------------------------------------------------
# Build Loader
# -----------------------------------------------------------------------------

echo ""
echo "##### START building loader"

pushd "${TARGET_LOADER_DIR}" >/dev/null 2>&1

# Even with 'set +e' the trap handler will run if a command or shell function
# returns non-zero, and in that case the trap handler also will run when the
# subshell completes.  Set 'CL_exitOnSigErr' to zero to not let the trap
# handler exit the shell when the subsell returns an error so the return value
# can be checked and a message printed before exiting the shell; also don't
# print the backtrace info because it did that in the subshell.
#
set +e ; # Let a build step fail without exiting this script.
CL_infoOnSigErr=0
CL_exitOnSigErr=0
(
# The subshell's 'CL_infoOnSigErr' needs to be set so the trap handler will
# print a backtrace for the subshell, if a command or shell function returns
# non-zero.
CL_infoOnSigErr=1
loader_xbuild "${K_LOADER}"
)
set -e ; # All done with build steps; enable exit on a non-zero status.
CL_infoOnSigErr=1
CL_exitOnSigErr=1

popd >/dev/null 2>&1

echo "##### DONE building loader"
echo ""


# *****************************************************************************
# Exit with Status
# *****************************************************************************

exit 0


# end of file
